name: Build Image On Release

on:
  workflow_dispatch:
  push:
    tags: 
      - 'v*'
  schedule:
    - cron:  '30 * * * *'      
  pull_request:
    branches:
      - 'main'
    types: [ assigned ]      

env:
  DOCKERHUB_SLUG: thespad/changedetection.io
  GHCR_SLUG: ghcr.io/thespad/changedetection.io

jobs:
  bake:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.3.4
      - 
        name: Check if we should rebuild
        id: build_check
        run: |
          if [ "${{github.event_name}}" != "schedule" ]; then
            echo "**** event was not cron, rebuilding ****"
            echo ::set-output name=update_available::true
            exit 0
          fi

          echo "**** Retrieving external version ****"
          EXT_RELEASE=$(curl -sX GET "https://api.github.com/repos/dgtlmoon/changedetection.io/releases/latest" | awk '/tag_name/{print $4;exit}' FS='[""]');
          if [ -z "${EXT_RELEASE}" ] || [ "${EXT_RELEASE}" == "null" ]; then
            echo "**** Can't retrieve external version, exiting ****"
            exit 1
          fi

          EXT_RELEASE=$(echo ${EXT_RELEASE} | sed 's/[~,%@+;:/]//g')

          echo "**** External version: ${EXT_RELEASE} ****"

          echo "**** Retrieving last pushed version ****"

          image="thespad/changedetection.io"
          tag="latest"
          token=$(curl -sX GET \
            "https://ghcr.io/token?scope=repository%3Athespad%2Fchangedetection.io%3Apull" \
            | jq -r '.token')
          multidigest=$(curl -s \
            --header "Accept: application/vnd.docker.distribution.manifest.v2+json" \
            --header "Authorization: Bearer ${token}" \
            "https://ghcr.io/v2/${image}/manifests/${tag}" \
            | jq -r 'first(.manifests[].digest)')
          digest=$(curl -s \
            --header "Accept: application/vnd.docker.distribution.manifest.v2+json" \
            --header "Authorization: Bearer ${token}" \
            "https://ghcr.io/v2/${image}/manifests/${multidigest}" \
            | jq -r '.config.digest')
          image_info=$(curl -sL \
            --header "Authorization: Bearer ${token}" \
            "https://ghcr.io/v2/${image}/blobs/${digest}" \
            | jq -r '.config')

          IMAGE_RELEASE=$(echo ${image_info} | jq -r '.Labels."org.opencontainers.image.version"')
          IMAGE_VERSION=$(echo ${IMAGE_RELEASE} | awk -F'-spad' '{print $1}' | cut -d 'v' -f 2)

          if [ -z "${IMAGE_VERSION}" ]; then
            echo "**** Can't retrieve last pushed version, exiting ****"
            exit 1
          fi

          echo "**** Last pushed version: ${IMAGE_VERSION} ****"

          if [ "${EXT_RELEASE}" == "${IMAGE_VERSION}" ]; then
            echo "**** Version ${EXT_RELEASE} already pushed, not rebuilding ****"
            echo ::set-output name=update_available::false
            exit 0
          fi

          echo ::set-output name=update_available::true
      -  
        name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3.5.0
        with:
          images: |
            ${{ env.DOCKERHUB_SLUG }}
            ${{ env.GHCR_SLUG }}
          labels: |
            org.opencontainers.image.title=changedetection.io
            org.opencontainers.image.description=changedetection.io
            org.opencontainers.image.vendor=TheSpad
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
      -
        name: Login to DockerHub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      -
        name: Build and push
        uses: docker/bake-action@v1.6.0
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.docker_meta.outputs.bake-file }}
          targets: image-all
          push: true
      - name: Do Release
        run: |
          if [ "${{github.event_name}}" != "schedule" ]; then
            echo "**** event was not cron, don't release ****"
            exit 0
          fi
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.REPO_SCOPED_TOKEN }}
          automatic_release_tag: ${{ fromJSON(steps.docker_meta.outputs.json).labels['org.opencontainers.image.version'] }}
          prerelease: false
          title: ${{ fromJSON(steps.docker_meta.outputs.json).labels['org.opencontainers.image.version'] }}           
